#!/usr/bin/env bash

#
# tb-util helper script for installing and removing webp images from the
# Tidbyt display
#
# ARG_HELP([tb-util help msg])
# ARG_POSITIONAL_SINGLE([command],[The action to execute])
# ARG_POSITIONAL_SINGLE([scope],[The scope of the action])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "tb-util help msg"
	printf 'Usage: %s [-h|--help] <command> <scope>\n' "$0"
	printf '\t%s\n' "<command>: The action to execute"
	printf '\t%s\n' "<scope>: The scope of the action"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command' and 'scope'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command _arg_scope "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

## install app
function install (){
    writeMessage "Currently installing: ${2}"
    pixlet push "${DEVICE}" "${1}" -t "${TOKEN}" -i "${2}"
}

### remove app
function remove () {
    writeMessage "Currently removing: ${1}"
    pixlet delete "${DEVICE}" "${1}" -t "${TOKEN}"
}

## Define action and scopes
actions=('install' 'remove')
scopes=('all' 'none')

## config utils
BSC_VERBOSE=1
BSC_MODE_CHECK_CONFIG=1

## Load utils
currentDir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
scriptsCommonUtilities="$currentDir/../scripts-common/utilities.sh"
[ ! -f "$scriptsCommonUtilities" ] && echo -e "ERROR: scripts-common utilities not found, you must initialize your git submodule once after you cloned the repository:\ngit submodule init\ngit submodule update" >&2 && exit 1
# shellcheck disable=1090
. "$scriptsCommonUtilities"

## Load dot env
if [ ! -f shdotenv ]; then
    writeMessage "Getting shdotenv..."
    wget --quiet "https://github.com/ko1nksm/shdotenv/releases/download/v0.13.0/shdotenv"
    chmod +x shdotenv
fi
eval "$(./shdotenv || echo "exit $?")"

## Let's go
writeMessage "Starting app installs..."

## Don't be root
if isRootUser; then
    errorMessage "This script should not be launched with root user."
fi

## check for pixlet and inform user
checkBin pixlet || errorMessage "This tool requires pixlet. Install it please, and then run this tool again. https://tidbyt.dev/docs/build/installing-pixlet"

## Show what is currently installed
writeMessage "Currently installed apps:"
pixlet list "${DEVICE}"

## Get our command
if [[ ! " ${actions[*]} " =~ [[:space:]]${_arg_command}[[:space:]] ]]; then
    errorMessage "Unknown action: ${_arg_command}" -1
    exit -1
fi

## Get our scope
if [[ ! " ${scopes[*]} " =~ [[:space:]]${_arg_scope}[[:space:]] ]]; then
    writeMessage "Custom scope: ${_arg_scope}" -1
fi

## A scope of none is a special case
## we just quit after showing the list of installed apps
if [[ "$_arg_scope" == "none" ]]; then
	exit 0
fi

## This is the source images
assets="$currentDir/../assets"

## the default match for 'all'
match=".*"

# Loop through files in the assets directory
for file in "$assets"/*; do
    if [ -f "$file" ] ; then

        ## get file parts
		filename=$(basename -- "$file")
        extension="${filename##*.}"
        name="${filename%.*}"

		## if not 'all' we need to match
		## 'none' case is already handled
		if [[ "${_arg_scope}" != "all" ]]; then
			match=$_arg_scope
		fi

		##  match gate
		if [[ ! $name =~ $match ]]; then
			continue
		fi

		## make sure we have a compatible file
        if [ "${extension}" == "webp" ]; then

			## replace '-' with '0' in the name to make it
			## compatible with Tidbyt naming requirements
            clean_name=${name//\-/0}

			## remove the app
            if [ "${_arg_command}" == "remove" ]; then
                remove "$clean_name"
			## install the app
            elif  [ "${_arg_command}" == "install" ]; then
                install "$file" "$clean_name"
            else
				## we should never get here
                errorMessage "Unknown action: ${_arg_command}" -1
            fi

        fi
    fi
done
# ] <-- needed because of Argbash
